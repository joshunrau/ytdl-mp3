name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
jobs:
  configure:
    runs-on: ubuntu-22.04
    outputs:
      package_name: ${{ steps.define.outputs.PACKAGE_NAME }}
      package_version: ${{ steps.define.outputs.PACKAGE_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - id: define
        run: |
          echo "PACKAGE_NAME=$(cat package.json | jq -r .name)" >> "$GITHUB_OUTPUT"
          echo "PACKAGE_VERSION=$(cat package.json | jq -r .version)" >> "$GITHUB_OUTPUT"
  create-release:
    runs-on: ubuntu-22.04
    needs: [configure]
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const { createRelease } = require('./.github/scripts/release.cjs');
            return await createRelease({ context, github }, {
              packageName: '${{ needs.configure.outputs.package_name }}',
              packageVersion: '${{ needs.configure.outputs.package_version }}'
            });
  build:
    needs: [configure, create-release]
    permissions:
      contents: write
    env:
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: true
      matrix:
        platform:
          # - os: 'ubuntu-22.04'
          #   target: 'x86_64-unknown-linux-musl'
          - os: 'ubuntu-22.04'
            target: 'aarch64-unknown-linux-musl'
          #   target: 'x86_64-unknown-linux-gnu'
          # - os: 'ubuntu-22.04'
          #   target: 'aarch64-unknown-linux-gnu'
          # - os: 'macos-latest'
          #   target: 'x86_64-apple-darwin'
          # - os: 'macos-latest'
          #   target: 'aarch64-apple-darwin'
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install System Dependencies (Ubuntu Only)
        if: matrix.platform.os == 'ubuntu-22.04'
        run: |
          grep ^deb /etc/apt/sources.list | sed 's/deb /deb [arch=amd64] /' | tee /tmp/sources.list
          mv /tmp/sources.list /etc/apt/sources.list
          dpkg --add-architecture arm64
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy universe  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-updates universe  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy multiverse  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-updates multiverse  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted  >> /etc/apt/sources.list.d/arm64-sources.list
          echo deb [arch=arm64]  http://ports.ubuntu.com/ubuntu-ports/ jammy-security universe  >> /etc/apt/sources.list.d/arm64-sources.list
          apt-get update
          apt-get install libssl-dev libssl-dev:arm64
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      - name: Setup Rust Cache
        uses: swatinem/rust-cache@v2
      - name: Compile Binary
        run: cargo build --bins --release --target ${{ matrix.platform.target }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.configure.outputs.package_name }}-${{ matrix.platform.target }}
          path: ./target/${{ matrix.platform.target }}/release/${{ needs.configure.outputs.package_name }}
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: [configure, create-release, build]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
      - name: Display Structure of Downloaded Files
        run: ls -R
      # - name: Publish Release
      #   id: publish-release
      #   uses: actions/github-script@v7
      #   env:
      #     release_id: ${{ needs.create-release.outputs.release_id }}
      #   with:
      #     script: |
      #       github.rest.repos.updateRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         release_id: process.env.release_id,
      #         draft: false,
      #       })
