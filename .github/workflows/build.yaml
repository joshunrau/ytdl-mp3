name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Get Package Metadata
        run: |
          echo "PACKAGE_NAME=$(cat package.json | jq -r .name)" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            require('./.github/scripts/release.cjs')({ context, github })
  build:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-musl'
            arch: 'x86_64'
            libc: 'musl'
          - os: 'ubuntu-20.04'
            target: 'aarch64-unknown-linux-musl'
            arch: 'aarch64'
            libc: 'musl'
          - os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
            libc: 'gnu'
          - os: 'ubuntu-20.04'
            target: 'aarch64-unknown-linux-gnu'
            arch: 'aarch64'
            libc: 'gnu'
          - os: 'macos-latest'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - os: 'macos-latest'
            arch: 'aarch64'
            target: 'aarch64-apple-darwin'
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Enable ARM64 Architecture (Ubuntu Only)
        if: ${{ matrix.platform.target == 'arch64-unknown-linux-gnu' || matrix.platform.target == 'aarch64-unknown-linux-musl' }}
        run: sudo dpkg --add-architecture arm64 && sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install Musl Tools (If Required)
        if: ${{ matrix.platform.libc == 'musl' }}
        run: sudo apt-get update && sudo apt-get install musl-tools
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      - name: Setup Rust Cache
        uses: swatinem/rust-cache@v2
      - name: Compile Binary
        run: cargo build --bins --release --target ${{ matrix.platform.target }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.env.PACKAGE_NAME }}-${{ matrix.platform.target }}
          path: ./target/release/${{ github.env.PACKAGE_NAME }}
